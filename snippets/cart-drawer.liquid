{% comment %}
  Renders cart drawer

  Usage:
  {% render 'cart-drawer' %}
{% endcomment %}

{{ 'quantity-popover.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}

<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>

<style>
  .cart-drawer {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    visibility: hidden;
  }

  .cart-drawer.active {
    visibility: visible;
  }

  .cart-drawer-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    opacity: 0;
    backdrop-filter: blur(2px);
    transition: opacity 0.3s ease;
  }

  .cart-drawer.active .cart-drawer-overlay {
    opacity: 1;
  }

  .cart-drawer-container {
    position: fixed;
    top: 0;
    right: 0;
    width: 400px;
    height: 100%;
    background: white;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    z-index: 1;
  }

  .cart-drawer.active .cart-drawer-container {
    transform: translateX(0);
  }

  .cart-drawer-header {
    padding: 20px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .cart-drawer-heading {
    margin: 0;
    font-family: var(--font-montserrat);
    font-size: var(--font-size-lg);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-wide);
  }

  .cart-drawer-close {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    color: currentColor;
  }

  .cart-drawer-content {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
  }

  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .cart-item {
    display: grid;
    grid-template-columns: 80px 1fr auto;
    gap: 16px;
    align-items: start;
  }

  .cart-item-image img {
    width: 100%;
    height: auto;
    border-radius: 4px;
  }

  .cart-item-info {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .cart-item-title {
    margin: 0;
    font-family: var(--font-montserrat);
    font-size: var(--font-size-sm);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-normal);
  }

  .cart-item-title a {
    text-decoration: none;
    color: inherit;
  }

  .cart-item-variant {
    margin: 0;
    font-family: var(--font-lato);
    font-size: var(--font-size-xs);
    font-weight: var(--font-light);
    color: rgba(0, 0, 0, 0.6);
  }

  .cart-item-price {
    font-family: var(--font-montserrat);
    font-weight: var(--font-medium);
  }

  .cart-item-quantity {
    display: flex;
    align-items: center;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 4px;
  }

  .quantity-button {
    background: none;
    border: none;
    padding: 8px 12px;
    cursor: pointer;
    color: currentColor;
  }

  .cart-item-quantity input {
    width: 40px;
    border: none;
    text-align: center;
    -moz-appearance: textfield;
  }

  .cart-item-quantity input::-webkit-outer-spin-button,
  .cart-item-quantity input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .cart-item-remove {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    color: rgba(0, 0, 0, 0.5);
  }

  .cart-footer {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .cart-subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: var(--font-montserrat);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-wide);
    margin-bottom: 16px;
  }

  .cart-checkout-button {
    width: 100%;
    padding: 16px;
    background: black;
    color: white;
    border: none;
    border-radius: 4px;
    font-family: var(--font-montserrat);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-wide);
    cursor: pointer;
    margin-bottom: 12px;
  }

  .cart-continue-shopping {
    width: 100%;
    padding: 14px;
    background: white;
    color: black;
    border: 2px solid black;
    border-radius: 4px;
    font-family: var(--font-montserrat);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-wide);
    cursor: pointer;
  }

  .cart-empty {
    text-align: center;
    padding: 40px 0;
  }

  @media screen and (max-width: 767px) {
    .cart-drawer-container {
      width: 100%;
    }
  }
</style>

<div class="cart-drawer" data-cart-drawer>
  <div class="cart-drawer-overlay" data-cart-drawer-overlay></div>
  <div class="cart-drawer-container">
    <div class="cart-drawer-header">
      <h2 class="cart-drawer-heading">Shopping Cart</h2>
      <button type="button" class="cart-drawer-close" aria-label="Close cart" data-cart-drawer-close>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 6L6 18M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    <div class="cart-drawer-content">
      {%- if cart.item_count > 0 -%}
        <form action="{{ routes.cart_url }}" method="post" id="cart-drawer-form">
          <div class="cart-items">
            {%- for item in cart.items -%}
              <div class="cart-item" data-cart-item="{{ item.key }}">
                <div class="cart-item-image">
                  <img
                    src="{{ item.image | image_url: width: 120 }}"
                    alt="{{ item.title | escape }}"
                    loading="lazy"
                    width="120"
                    height="120"
                  >
                </div>
                <div class="cart-item-info">
                  <h3 class="cart-item-title">
                    <a href="{{ item.url }}">{{ item.product.title }}</a>
                  </h3>
                  {%- if item.product.has_only_default_variant == false -%}
                    <p class="cart-item-variant">{{ item.variant.title }}</p>
                  {%- endif -%}
                  <div class="cart-item-price">{{ item.final_line_price | money }}</div>
                  <div class="cart-item-quantity">
                    <button type="button" class="quantity-button" data-quantity-minus>-</button>
                    <input
                      type="number"
                      name="updates[]"
                      value="{{ item.quantity }}"
                      min="0"
                      aria-label="Quantity"
                      data-quantity-input
                    >
                    <button type="button" class="quantity-button" data-quantity-plus>+</button>
                  </div>
                </div>
                <button
                  type="button"
                  class="cart-item-remove"
                  aria-label="Remove {{ item.title | escape }}"
                  data-cart-remove="{{ item.key }}"
                >
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="1.5">
                    <path d="M2 4h12M5.333 4V2.667a1.333 1.333 0 011.334-1.334h2.666a1.333 1.333 0 011.334 1.334V4m2 0v9.333a1.333 1.333 0 01-1.334 1.334H4.667a1.333 1.333 0 01-1.334-1.334V4h9.334z"/>
                  </svg>
                </button>
              </div>
            {%- endfor -%}
          </div>
          <div class="cart-footer">
            <div class="cart-subtotal">
              <span>Subtotal</span>
              <span>{{ cart.total_price | money }}</span>
            </div>
            <button type="submit" name="checkout" class="cart-checkout-button">Checkout</button>
            <button type="button" class="cart-continue-shopping" data-cart-drawer-close>Continue Shopping</button>
          </div>
        </form>
      {%- else -%}
        <div class="cart-empty">
          <p>Your cart is empty</p>
          <button type="button" class="cart-continue-shopping" data-cart-drawer-close>Continue Shopping</button>
        </div>
      {%- endif -%}
    </div>
  </div>
</div>

<script>
  class CartDrawer {
    constructor() {
      this.drawer = document.querySelector('[data-cart-drawer]');
      this.container = document.querySelector('.cart-drawer-container');
      this.toggleButtons = document.querySelectorAll('.cart-icon');
      this.closeButton = document.querySelector('[data-cart-drawer-close]');
      this.overlay = document.querySelector('[data-cart-drawer-overlay]');
      this.quantityInputs = document.querySelectorAll('[data-quantity-input]');
      this.removeButtons = document.querySelectorAll('[data-cart-remove]');

      this.init();
    }

    init() {
      this.toggleButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          this.open();
        });
      });

      this.closeButton.addEventListener('click', () => this.close());
      this.overlay.addEventListener('click', () => this.close());

      // Handle clicks outside the cart
      document.addEventListener('click', (e) => {
        if (
          this.drawer.classList.contains('active') &&
          !this.container.contains(e.target) &&
          !Array.from(this.toggleButtons).some((button) => button.contains(e.target))
        ) {
          this.close();
        }
      });

      // Setup quantity controls
      document.querySelectorAll('[data-quantity-minus]').forEach((button) => {
        button.addEventListener('click', (e) => {
          const input = e.target.parentNode.querySelector('[data-quantity-input]');
          const value = parseInt(input.value) - 1;
          input.value = Math.max(0, value);
          this.updateCart(input);
        });
      });

      document.querySelectorAll('[data-quantity-plus]').forEach((button) => {
        button.addEventListener('click', (e) => {
          const input = e.target.parentNode.querySelector('[data-quantity-input]');
          input.value = parseInt(input.value) + 1;
          this.updateCart(input);
        });
      });

      // Setup remove buttons
      this.removeButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const key = e.target.dataset.cartRemove;
          this.removeItem(key);
        });
      });
    }

    open() {
      this.drawer.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.drawer.classList.remove('active');
      document.body.style.overflow = '';
    }

    async updateCart(input) {
      const form = document.getElementById('cart-drawer-form');
      const formData = new FormData(form);

      try {
        const response = await fetch(window.Shopify.routes.cart_update_url, {
          method: 'POST',
          body: formData,
        });

        if (response.ok) {
          const cart = await response.json();
          this.updateCartUI(cart);
        }
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    }

    async removeItem(key) {
      try {
        const response = await fetch(window.Shopify.routes.cart_change_url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: key,
            quantity: 0,
          }),
        });

        if (response.ok) {
          const cart = await response.json();
          this.updateCartUI(cart);
        }
      } catch (error) {
        console.error('Error removing item:', error);
      }
    }

    updateCartUI(cart) {
      // Update cart count
      document.querySelectorAll('.cart-count').forEach((el) => {
        el.textContent = cart.item_count;
      });

      // Refresh the drawer content
      // You might want to implement a more sophisticated update here
      window.location.reload();
    }
  }

  // Initialize cart drawer
  window.addEventListener('DOMContentLoaded', () => {
    new CartDrawer();
  });
</script>
